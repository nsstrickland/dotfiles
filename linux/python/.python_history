exit
exit()
import yaml
f = open('/home/nick/Config/install.conf.yaml')
yaml_file=yaml.safe_load(f)
for i in yaml_file:
print yaml_file[i]
for i in yaml_file:
	print yaml_file[i]
exit
clear
import os
os
os.
os.system('clear')
import yaml
f=open('install.conf.yaml')
print(f)
yaml_file=yaml.safe_load(f)
print(yaml_file)
for i in yaml_file:
	print(yaml_file[i])
for i in yaml_file:
	print(yaml_file[i][""])
print(yaml_file[0])
print(yaml_file[1])
print(yaml_file[2])
print(yaml_file["link"])
print(yaml_file['link'])
print(yaml_file[2])
print(yaml_file[2]['link'])
print(yaml_file[2]['link'][0])
os.system('clear')
wuth open("install.conf.yaml", 'r') as stream:
open
clear
os.system('clear')
with open('install.conf.yaml', 'r') as f:
	doc = yaml.safe_load(f)
print(doc[0][0])
print(doc[0])
print(doc[0]['link'])
print(doc[0]['defaults'])
print(doc[0]['defaults']['link'])
print(doc[1])
print(doc[2])
txt=doc["link"]
txt=doc["2"]
doc[2]
doc[2]["link"]
doc[2]["link"][0]
doc[2]["link"]
os.system('clear')
doc[2]["link"]
print(doc)
print(doc[0])
print(doc[0][0])
print(doc[0][1])
doc[0]
doc[1]
doc[2]
doc[2]['link
doc[2]['link']
doc[2]['link'][0]
doc[2]['link']
clear
doc
doc[0]
doc['link']
doc.index('list')
doc.index(0)
doc.index
doc.pop(
doc.pop
doc.index(
doc.index
doc
doc[0]
doc[0].items()
doc.index()
doc.index(0)
doc.index('0')
doc[0].index('list')
doc[0]
(doc[0]).index
clear
doc[0]
doc
clear()
os.system('clear')
doc
doc.count
doc.count()
doc.count(0)
doc.count(1)
doc.extend
doc.extend()
doc.extend(1)
doc.extend(0)
doc.__init_subclass__()
dpc
doc
os.system('clear')
type(doc)
type(doc).mro
type(doc).mro()
clear
"test" ~= "tes"
if "test" ~= "tes":
var
a="test"
print(a)
a.find("te")
a.find("tefs")
a.find("tefsergergerg")
alias
def alias:
def clear():
	import os
	os.system('clear')
clear()
opt={
"<class 'dict'>":"t1",
"<class 'list'>":"t2"
}
type(opt)
opt[type(doc)]
type(doc)
opt
opt[0]
opt[ type(doc) ]
opt[type(doc)]
def t2():
	print("success")
opt[type(doc)]()
opt.get(type(doc),"bad")
opt.get(type(doc))
opt.get((type(doc)))
type(doc)
opt
opt.get("<class ;dict'>")
opt.get("<class ;dict'>","bad")
opt.get(0,"bad")
opt.get(1,"bad")
clear
clear()
doc
doc[0]
type(doc)
doc[0][0]
type(doc[0])
doc[0][0]
doc[0]
for i in doc[0]:
	print(i)
clear()
doc
doc[0]
doc[1]
doc[3]
doc[2]
clear()
doc[2]
for i in doc[2]:
	print(i)
	print(doc[2][i])
for i in doc[2]:
	print(doc[2][i])
type(doc[2])
clear()
	print(i)
clear
clear()
for i in doc[2]:
	print(doc[2][i])
doc[2]["link"]
type(doc[2]["link"])
for i in doc[2]["link"]:
	print(i)
type(doc[2])
clear()
function hello() {
function hello():
clear()
function hello():
def hello():
	test="test"
	return test
	print(test)
hello()
def hello():
	test="test"
	return test
	print(test,"testtesttest")
hello()
clear
./install.py
install.py
run(install.py)
start(install.py)
import install.py
import install.
import install
clear()
print(var)
import sys
exec("install.sh")
exec("install.py")
exec("install")
execfile
clear
clear()
exec(open('install.py'))
exec(open('install.py').read())
var=exec(open('install.py').read())
print(var)
exec(open('install.py').read())
print(var)
var[0]
var["move"]
var
var.count()
var.count(1)
var.sort()
var
var[0]
type(var)
len(var)
clear()
shutil
clear
clear()
clear
exit
exit()
print(env)
print(PATH)
print(path)
print($en)
print($env)
clear()
type export
type(getenv)
clear
import(os)
import os;
os.environ
os.environ|
exit()
q
quit()
q
from gi.repository import Nautilus, GObject, Gtk
widget = Gtk.ActionBar()
widget.set_tooltip_text("test!")
print()
quit
quit()
q
quit
import
import python-xlib
import "python-xlib"
import("python-xlib")
import(python-xlib)
import python-xlib
import python-xlib;
import xlib
import pythonxlib
pip
import pyxlib
xlib
Xlib
import "python-xlib"
import 'python-xlib'
import python-xlib
import pythonxlib
import Xlib
Xlib._all__
Xlib.__all__
from Xlib import X, display, Xutil, window
from Xlib import X, display, Xutil, Window
from Xlib import X, display, Xutil, windows
from Xlib import X, display, Xutil, Xobject
from Xlib import X, display, Xutil, Xobjects
from Xlib import X, display, Xutil, XObjects
from Xlib import X, display, Xutil, XObject
from Xlib import X, display, Xutil
from Xlib import X, display, Xutil, xobject
$test
test="test"
print(test)
dis=display.Display(:0)
dis=display.Display(":0")
dis=display.Display()
dis
dir(dis)
print(dis.screen)
print(dis.screen_count())
print(dis.display)
print
print(dis.screen().root))
print(dis.screen().root)
root=print(dis.screen().root)
root=(dis.screen().root)
root.xrandr_get_screen_resources()
root.query_pointer()
root.query_pointer().child
wow=root.query_pointer().child
wow.id
dir(wow)
wow.get_wm_name()
root.get_attributes()
root.query_tree()
for
for win in root.query_tree():
print(win.get_wm_name())
for win in root.query_tree():
	print(win.get_wm_name())
for win in (root.query_tree()).children:
	print(win.get_wm_name())
root.query_pointer().child
wow.get_geometry()
root.query_pointer().child
root.query_pointer()
import Xlib
from Xlib import display, X, xobject
dis=display.Display()
dis.screen().root
root=dis.screen().root
root.query_pointer()
root.query_pointer().child
wow=root.query_pointer().child
wow
dir(wow)
wow.get_wm_name()
wow.get_geometry()
root
root.query_tree()
for win in root.query_tree():
	if win.get_wm_name() == 'World of Warcraft':
		wow_window=win
		print(win)
for win in root.query_tree().children:
	if win.get_wm_name() == 'World of Warcraft':
		wow_window=win
		print(win)
wow_window
wow_window.get_geometry()
exit()
